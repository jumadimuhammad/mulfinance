// Code generated by mockery v2.30.1. DO NOT EDIT.

package ports

import (
	context "context"
	entities "mulfinance/pkg/limit/repository/entities"

	mock "github.com/stretchr/testify/mock"
)

// IRepository is an autogenerated mock type for the IRepository type
type IRepository struct {
	mock.Mock
}

type IRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *IRepository) EXPECT() *IRepository_Expecter {
	return &IRepository_Expecter{mock: &_m.Mock}
}

// GetLimitByIDs provides a mock function with given fields: ctx, limitIDs
func (_m *IRepository) GetLimitByIDs(ctx context.Context, limitIDs []uint) ([]entities.Limit, error) {
	ret := _m.Called(ctx, limitIDs)

	var r0 []entities.Limit
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []uint) ([]entities.Limit, error)); ok {
		return rf(ctx, limitIDs)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []uint) []entities.Limit); ok {
		r0 = rf(ctx, limitIDs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.Limit)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []uint) error); ok {
		r1 = rf(ctx, limitIDs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IRepository_GetLimitByIDs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLimitByIDs'
type IRepository_GetLimitByIDs_Call struct {
	*mock.Call
}

// GetLimitByIDs is a helper method to define mock.On call
//   - ctx context.Context
//   - limitIDs []uint
func (_e *IRepository_Expecter) GetLimitByIDs(ctx interface{}, limitIDs interface{}) *IRepository_GetLimitByIDs_Call {
	return &IRepository_GetLimitByIDs_Call{Call: _e.mock.On("GetLimitByIDs", ctx, limitIDs)}
}

func (_c *IRepository_GetLimitByIDs_Call) Run(run func(ctx context.Context, limitIDs []uint)) *IRepository_GetLimitByIDs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]uint))
	})
	return _c
}

func (_c *IRepository_GetLimitByIDs_Call) Return(limits []entities.Limit, err error) *IRepository_GetLimitByIDs_Call {
	_c.Call.Return(limits, err)
	return _c
}

func (_c *IRepository_GetLimitByIDs_Call) RunAndReturn(run func(context.Context, []uint) ([]entities.Limit, error)) *IRepository_GetLimitByIDs_Call {
	_c.Call.Return(run)
	return _c
}

// ListLimit provides a mock function with given fields: ctx
func (_m *IRepository) ListLimit(ctx context.Context) ([]entities.Limit, error) {
	ret := _m.Called(ctx)

	var r0 []entities.Limit
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]entities.Limit, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []entities.Limit); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.Limit)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IRepository_ListLimit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListLimit'
type IRepository_ListLimit_Call struct {
	*mock.Call
}

// ListLimit is a helper method to define mock.On call
//   - ctx context.Context
func (_e *IRepository_Expecter) ListLimit(ctx interface{}) *IRepository_ListLimit_Call {
	return &IRepository_ListLimit_Call{Call: _e.mock.On("ListLimit", ctx)}
}

func (_c *IRepository_ListLimit_Call) Run(run func(ctx context.Context)) *IRepository_ListLimit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *IRepository_ListLimit_Call) Return(limits []entities.Limit, err error) *IRepository_ListLimit_Call {
	_c.Call.Return(limits, err)
	return _c
}

func (_c *IRepository_ListLimit_Call) RunAndReturn(run func(context.Context) ([]entities.Limit, error)) *IRepository_ListLimit_Call {
	_c.Call.Return(run)
	return _c
}

// NewIRepository creates a new instance of IRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *IRepository {
	mock := &IRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
